// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`todo tests should call appropriate functions 1`] = `
<Todo
  completed={true}
  deleteTodo={[MockFunction]}
  id={666}
  text="test should call appropriate functions text"
  toggleTodo={[MockFunction]}
>
  <div
    className="Todo"
  >
    <WithStyles(ForwardRef(ListItem))>
      <ForwardRef(ListItem)
        classes={
          Object {
            "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
            "button": "MuiListItem-button",
            "container": "MuiListItem-container",
            "dense": "MuiListItem-dense",
            "disabled": "Mui-disabled",
            "divider": "MuiListItem-divider",
            "focusVisible": "Mui-focusVisible",
            "gutters": "MuiListItem-gutters",
            "root": "MuiListItem-root",
            "secondaryAction": "MuiListItem-secondaryAction",
            "selected": "Mui-selected",
          }
        }
      >
        <li
          className="MuiListItem-root MuiListItem-gutters"
          disabled={false}
        >
          <WithStyles(ForwardRef(Checkbox))
            checked={true}
            color="primary"
            key=".0"
            onClick={[Function]}
            value="checkedB"
          >
            <ForwardRef(Checkbox)
              checked={true}
              classes={
                Object {
                  "checked": "Mui-checked",
                  "colorPrimary": "MuiCheckbox-colorPrimary",
                  "colorSecondary": "MuiCheckbox-colorSecondary",
                  "disabled": "Mui-disabled",
                  "indeterminate": "MuiCheckbox-indeterminate",
                  "root": "MuiCheckbox-root",
                }
              }
              color="primary"
              onClick={[Function]}
              value="checkedB"
            >
              <WithStyles(ForwardRef(SwitchBase))
                checked={true}
                checkedIcon={<Memo(CheckBoxIcon) />}
                classes={
                  Object {
                    "checked": "Mui-checked",
                    "disabled": "Mui-disabled",
                    "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                  }
                }
                color="primary"
                icon={<Memo(CheckBoxOutlineBlankIcon) />}
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onClick={[Function]}
                type="checkbox"
                value="checkedB"
              >
                <ForwardRef(SwitchBase)
                  checked={true}
                  checkedIcon={<Memo(CheckBoxIcon) />}
                  classes={
                    Object {
                      "checked": "PrivateSwitchBase-checked-135 Mui-checked",
                      "disabled": "PrivateSwitchBase-disabled-136 Mui-disabled",
                      "input": "PrivateSwitchBase-input-137",
                      "root": "PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary",
                    }
                  }
                  color="primary"
                  icon={<Memo(CheckBoxOutlineBlankIcon) />}
                  inputProps={
                    Object {
                      "data-indeterminate": false,
                    }
                  }
                  onClick={[Function]}
                  type="checkbox"
                  value="checkedB"
                >
                  <WithStyles(ForwardRef(IconButton))
                    className="PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-135 Mui-checked"
                    color="primary"
                    component="span"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <ForwardRef(IconButton)
                      className="PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-135 Mui-checked"
                      classes={
                        Object {
                          "colorInherit": "MuiIconButton-colorInherit",
                          "colorPrimary": "MuiIconButton-colorPrimary",
                          "colorSecondary": "MuiIconButton-colorSecondary",
                          "disabled": "Mui-disabled",
                          "edgeEnd": "MuiIconButton-edgeEnd",
                          "edgeStart": "MuiIconButton-edgeStart",
                          "label": "MuiIconButton-label",
                          "root": "MuiIconButton-root",
                          "sizeSmall": "MuiIconButton-sizeSmall",
                        }
                      }
                      color="primary"
                      component="span"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-135 Mui-checked MuiIconButton-colorPrimary"
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <ForwardRef(ButtonBase)
                          centerRipple={true}
                          className="MuiIconButton-root PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-135 Mui-checked MuiIconButton-colorPrimary"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="span"
                          disabled={false}
                          focusRipple={true}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          tabIndex={null}
                        >
                          <span
                            aria-disabled={false}
                            className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-134 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-135 Mui-checked MuiIconButton-colorPrimary"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={null}
                          >
                            <span
                              className="MuiIconButton-label"
                            >
                              <input
                                checked={true}
                                className="PrivateSwitchBase-input-137"
                                data-indeterminate={false}
                                onChange={[Function]}
                                type="checkbox"
                                value="checkedB"
                              />
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                            </span>
                            <NoSsr>
                              <WithStyles(undefined)
                                center={true}
                              >
                                <ForwardRef(TouchRipple)
                                  center={true}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(undefined)>
                            </NoSsr>
                          </span>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(IconButton)>
                  </WithStyles(ForwardRef(IconButton))>
                </ForwardRef(SwitchBase)>
              </WithStyles(ForwardRef(SwitchBase))>
            </ForwardRef(Checkbox)>
          </WithStyles(ForwardRef(Checkbox))>
          <WithStyles(ForwardRef(ListItemText))
            key=".1"
            primary="test should call appropriate functions text"
          >
            <ForwardRef(ListItemText)
              classes={
                Object {
                  "dense": "MuiListItemText-dense",
                  "inset": "MuiListItemText-inset",
                  "multiline": "MuiListItemText-multiline",
                  "primary": "MuiListItemText-primary",
                  "root": "MuiListItemText-root",
                  "secondary": "MuiListItemText-secondary",
                }
              }
              primary="test should call appropriate functions text"
            >
              <div
                className="MuiListItemText-root"
              >
                <WithStyles(ForwardRef(Typography))
                  className="MuiListItemText-primary"
                  component="span"
                  variant="body1"
                >
                  <ForwardRef(Typography)
                    className="MuiListItemText-primary"
                    classes={
                      Object {
                        "alignCenter": "MuiTypography-alignCenter",
                        "alignJustify": "MuiTypography-alignJustify",
                        "alignLeft": "MuiTypography-alignLeft",
                        "alignRight": "MuiTypography-alignRight",
                        "body1": "MuiTypography-body1",
                        "body2": "MuiTypography-body2",
                        "button": "MuiTypography-button",
                        "caption": "MuiTypography-caption",
                        "colorError": "MuiTypography-colorError",
                        "colorInherit": "MuiTypography-colorInherit",
                        "colorPrimary": "MuiTypography-colorPrimary",
                        "colorSecondary": "MuiTypography-colorSecondary",
                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                        "displayBlock": "MuiTypography-displayBlock",
                        "displayInline": "MuiTypography-displayInline",
                        "gutterBottom": "MuiTypography-gutterBottom",
                        "h1": "MuiTypography-h1",
                        "h2": "MuiTypography-h2",
                        "h3": "MuiTypography-h3",
                        "h4": "MuiTypography-h4",
                        "h5": "MuiTypography-h5",
                        "h6": "MuiTypography-h6",
                        "noWrap": "MuiTypography-noWrap",
                        "overline": "MuiTypography-overline",
                        "paragraph": "MuiTypography-paragraph",
                        "root": "MuiTypography-root",
                        "srOnly": "MuiTypography-srOnly",
                        "subtitle1": "MuiTypography-subtitle1",
                        "subtitle2": "MuiTypography-subtitle2",
                      }
                    }
                    component="span"
                    variant="body1"
                  >
                    <span
                      className="MuiTypography-root MuiListItemText-primary MuiTypography-body1"
                    >
                      test should call appropriate functions text
                    </span>
                  </ForwardRef(Typography)>
                </WithStyles(ForwardRef(Typography))>
              </div>
            </ForwardRef(ListItemText)>
          </WithStyles(ForwardRef(ListItemText))>
          <WithStyles(ForwardRef(IconButton))
            key=".2"
            onClick={[Function]}
          >
            <ForwardRef(IconButton)
              classes={
                Object {
                  "colorInherit": "MuiIconButton-colorInherit",
                  "colorPrimary": "MuiIconButton-colorPrimary",
                  "colorSecondary": "MuiIconButton-colorSecondary",
                  "disabled": "Mui-disabled",
                  "edgeEnd": "MuiIconButton-edgeEnd",
                  "edgeStart": "MuiIconButton-edgeStart",
                  "label": "MuiIconButton-label",
                  "root": "MuiIconButton-root",
                  "sizeSmall": "MuiIconButton-sizeSmall",
                }
              }
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                centerRipple={true}
                className="MuiIconButton-root"
                disabled={false}
                focusRipple={true}
                onClick={[Function]}
              >
                <ForwardRef(ButtonBase)
                  centerRipple={true}
                  className="MuiIconButton-root"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  disabled={false}
                  focusRipple={true}
                  onClick={[Function]}
                >
                  <button
                    className="MuiButtonBase-root MuiIconButton-root"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiIconButton-label"
                    >
                      <ForwardRef>
                        <WithStyles(ForwardRef(SvgIcon))>
                          <ForwardRef(SvgIcon)
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden="true"
                              className="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef>
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={true}
                      >
                        <ForwardRef(TouchRipple)
                          center={true}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(IconButton)>
          </WithStyles(ForwardRef(IconButton))>
        </li>
      </ForwardRef(ListItem)>
    </WithStyles(ForwardRef(ListItem))>
  </div>
</Todo>
`;

exports[`todo tests should render corectly when completed is false 1`] = `
<Todo
  completed={false}
>
  <div
    className="Todo"
  >
    <WithStyles(ForwardRef(ListItem))>
      <ForwardRef(ListItem)
        classes={
          Object {
            "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
            "button": "MuiListItem-button",
            "container": "MuiListItem-container",
            "dense": "MuiListItem-dense",
            "disabled": "Mui-disabled",
            "divider": "MuiListItem-divider",
            "focusVisible": "Mui-focusVisible",
            "gutters": "MuiListItem-gutters",
            "root": "MuiListItem-root",
            "secondaryAction": "MuiListItem-secondaryAction",
            "selected": "Mui-selected",
          }
        }
      >
        <li
          className="MuiListItem-root MuiListItem-gutters"
          disabled={false}
        >
          <WithStyles(ForwardRef(Checkbox))
            checked={false}
            color="primary"
            key=".0"
            onClick={[Function]}
            value="checkedB"
          >
            <ForwardRef(Checkbox)
              checked={false}
              classes={
                Object {
                  "checked": "Mui-checked",
                  "colorPrimary": "MuiCheckbox-colorPrimary",
                  "colorSecondary": "MuiCheckbox-colorSecondary",
                  "disabled": "Mui-disabled",
                  "indeterminate": "MuiCheckbox-indeterminate",
                  "root": "MuiCheckbox-root",
                }
              }
              color="primary"
              onClick={[Function]}
              value="checkedB"
            >
              <WithStyles(ForwardRef(SwitchBase))
                checked={false}
                checkedIcon={<Memo(CheckBoxIcon) />}
                classes={
                  Object {
                    "checked": "Mui-checked",
                    "disabled": "Mui-disabled",
                    "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                  }
                }
                color="primary"
                icon={<Memo(CheckBoxOutlineBlankIcon) />}
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onClick={[Function]}
                type="checkbox"
                value="checkedB"
              >
                <ForwardRef(SwitchBase)
                  checked={false}
                  checkedIcon={<Memo(CheckBoxIcon) />}
                  classes={
                    Object {
                      "checked": "PrivateSwitchBase-checked-77 Mui-checked",
                      "disabled": "PrivateSwitchBase-disabled-78 Mui-disabled",
                      "input": "PrivateSwitchBase-input-79",
                      "root": "PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary",
                    }
                  }
                  color="primary"
                  icon={<Memo(CheckBoxOutlineBlankIcon) />}
                  inputProps={
                    Object {
                      "data-indeterminate": false,
                    }
                  }
                  onClick={[Function]}
                  type="checkbox"
                  value="checkedB"
                >
                  <WithStyles(ForwardRef(IconButton))
                    className="PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary"
                    color="primary"
                    component="span"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <ForwardRef(IconButton)
                      className="PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary"
                      classes={
                        Object {
                          "colorInherit": "MuiIconButton-colorInherit",
                          "colorPrimary": "MuiIconButton-colorPrimary",
                          "colorSecondary": "MuiIconButton-colorSecondary",
                          "disabled": "Mui-disabled",
                          "edgeEnd": "MuiIconButton-edgeEnd",
                          "edgeStart": "MuiIconButton-edgeStart",
                          "label": "MuiIconButton-label",
                          "root": "MuiIconButton-root",
                          "sizeSmall": "MuiIconButton-sizeSmall",
                        }
                      }
                      color="primary"
                      component="span"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <ForwardRef(ButtonBase)
                          centerRipple={true}
                          className="MuiIconButton-root PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="span"
                          disabled={false}
                          focusRipple={true}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          tabIndex={null}
                        >
                          <span
                            aria-disabled={false}
                            className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-76 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={null}
                          >
                            <span
                              className="MuiIconButton-label"
                            >
                              <input
                                checked={false}
                                className="PrivateSwitchBase-input-79"
                                data-indeterminate={false}
                                onChange={[Function]}
                                type="checkbox"
                                value="checkedB"
                              />
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                            </span>
                            <NoSsr>
                              <WithStyles(undefined)
                                center={true}
                              >
                                <ForwardRef(TouchRipple)
                                  center={true}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(undefined)>
                            </NoSsr>
                          </span>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(IconButton)>
                  </WithStyles(ForwardRef(IconButton))>
                </ForwardRef(SwitchBase)>
              </WithStyles(ForwardRef(SwitchBase))>
            </ForwardRef(Checkbox)>
          </WithStyles(ForwardRef(Checkbox))>
          <WithStyles(ForwardRef(ListItemText))
            key=".1"
          >
            <ForwardRef(ListItemText)
              classes={
                Object {
                  "dense": "MuiListItemText-dense",
                  "inset": "MuiListItemText-inset",
                  "multiline": "MuiListItemText-multiline",
                  "primary": "MuiListItemText-primary",
                  "root": "MuiListItemText-root",
                  "secondary": "MuiListItemText-secondary",
                }
              }
            >
              <div
                className="MuiListItemText-root"
              />
            </ForwardRef(ListItemText)>
          </WithStyles(ForwardRef(ListItemText))>
          <WithStyles(ForwardRef(IconButton))
            key=".2"
            onClick={[Function]}
          >
            <ForwardRef(IconButton)
              classes={
                Object {
                  "colorInherit": "MuiIconButton-colorInherit",
                  "colorPrimary": "MuiIconButton-colorPrimary",
                  "colorSecondary": "MuiIconButton-colorSecondary",
                  "disabled": "Mui-disabled",
                  "edgeEnd": "MuiIconButton-edgeEnd",
                  "edgeStart": "MuiIconButton-edgeStart",
                  "label": "MuiIconButton-label",
                  "root": "MuiIconButton-root",
                  "sizeSmall": "MuiIconButton-sizeSmall",
                }
              }
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                centerRipple={true}
                className="MuiIconButton-root"
                disabled={false}
                focusRipple={true}
                onClick={[Function]}
              >
                <ForwardRef(ButtonBase)
                  centerRipple={true}
                  className="MuiIconButton-root"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  disabled={false}
                  focusRipple={true}
                  onClick={[Function]}
                >
                  <button
                    className="MuiButtonBase-root MuiIconButton-root"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiIconButton-label"
                    >
                      <ForwardRef>
                        <WithStyles(ForwardRef(SvgIcon))>
                          <ForwardRef(SvgIcon)
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden="true"
                              className="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef>
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={true}
                      >
                        <ForwardRef(TouchRipple)
                          center={true}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(IconButton)>
          </WithStyles(ForwardRef(IconButton))>
        </li>
      </ForwardRef(ListItem)>
    </WithStyles(ForwardRef(ListItem))>
  </div>
</Todo>
`;

exports[`todo tests should render corectly when completed is true 1`] = `
<Todo
  completed={true}
>
  <div
    className="Todo"
  >
    <WithStyles(ForwardRef(ListItem))>
      <ForwardRef(ListItem)
        classes={
          Object {
            "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
            "button": "MuiListItem-button",
            "container": "MuiListItem-container",
            "dense": "MuiListItem-dense",
            "disabled": "Mui-disabled",
            "divider": "MuiListItem-divider",
            "focusVisible": "Mui-focusVisible",
            "gutters": "MuiListItem-gutters",
            "root": "MuiListItem-root",
            "secondaryAction": "MuiListItem-secondaryAction",
            "selected": "Mui-selected",
          }
        }
      >
        <li
          className="MuiListItem-root MuiListItem-gutters"
          disabled={false}
        >
          <WithStyles(ForwardRef(Checkbox))
            checked={true}
            color="primary"
            key=".0"
            onClick={[Function]}
            value="checkedB"
          >
            <ForwardRef(Checkbox)
              checked={true}
              classes={
                Object {
                  "checked": "Mui-checked",
                  "colorPrimary": "MuiCheckbox-colorPrimary",
                  "colorSecondary": "MuiCheckbox-colorSecondary",
                  "disabled": "Mui-disabled",
                  "indeterminate": "MuiCheckbox-indeterminate",
                  "root": "MuiCheckbox-root",
                }
              }
              color="primary"
              onClick={[Function]}
              value="checkedB"
            >
              <WithStyles(ForwardRef(SwitchBase))
                checked={true}
                checkedIcon={<Memo(CheckBoxIcon) />}
                classes={
                  Object {
                    "checked": "Mui-checked",
                    "disabled": "Mui-disabled",
                    "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                  }
                }
                color="primary"
                icon={<Memo(CheckBoxOutlineBlankIcon) />}
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onClick={[Function]}
                type="checkbox"
                value="checkedB"
              >
                <ForwardRef(SwitchBase)
                  checked={true}
                  checkedIcon={<Memo(CheckBoxIcon) />}
                  classes={
                    Object {
                      "checked": "PrivateSwitchBase-checked-19 Mui-checked",
                      "disabled": "PrivateSwitchBase-disabled-20 Mui-disabled",
                      "input": "PrivateSwitchBase-input-21",
                      "root": "PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary",
                    }
                  }
                  color="primary"
                  icon={<Memo(CheckBoxOutlineBlankIcon) />}
                  inputProps={
                    Object {
                      "data-indeterminate": false,
                    }
                  }
                  onClick={[Function]}
                  type="checkbox"
                  value="checkedB"
                >
                  <WithStyles(ForwardRef(IconButton))
                    className="PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-19 Mui-checked"
                    color="primary"
                    component="span"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <ForwardRef(IconButton)
                      className="PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-19 Mui-checked"
                      classes={
                        Object {
                          "colorInherit": "MuiIconButton-colorInherit",
                          "colorPrimary": "MuiIconButton-colorPrimary",
                          "colorSecondary": "MuiIconButton-colorSecondary",
                          "disabled": "Mui-disabled",
                          "edgeEnd": "MuiIconButton-edgeEnd",
                          "edgeStart": "MuiIconButton-edgeStart",
                          "label": "MuiIconButton-label",
                          "root": "MuiIconButton-root",
                          "sizeSmall": "MuiIconButton-sizeSmall",
                        }
                      }
                      color="primary"
                      component="span"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-19 Mui-checked MuiIconButton-colorPrimary"
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <ForwardRef(ButtonBase)
                          centerRipple={true}
                          className="MuiIconButton-root PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-19 Mui-checked MuiIconButton-colorPrimary"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="span"
                          disabled={false}
                          focusRipple={true}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          tabIndex={null}
                        >
                          <span
                            aria-disabled={false}
                            className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-18 MuiCheckbox-root MuiCheckbox-colorPrimary PrivateSwitchBase-checked-19 Mui-checked MuiIconButton-colorPrimary"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={null}
                          >
                            <span
                              className="MuiIconButton-label"
                            >
                              <input
                                checked={true}
                                className="PrivateSwitchBase-input-21"
                                data-indeterminate={false}
                                onChange={[Function]}
                                type="checkbox"
                                value="checkedB"
                              />
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                            </span>
                            <NoSsr>
                              <WithStyles(undefined)
                                center={true}
                              >
                                <ForwardRef(TouchRipple)
                                  center={true}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      component={null}
                                      exit={true}
                                    />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(undefined)>
                            </NoSsr>
                          </span>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(IconButton)>
                  </WithStyles(ForwardRef(IconButton))>
                </ForwardRef(SwitchBase)>
              </WithStyles(ForwardRef(SwitchBase))>
            </ForwardRef(Checkbox)>
          </WithStyles(ForwardRef(Checkbox))>
          <WithStyles(ForwardRef(ListItemText))
            key=".1"
          >
            <ForwardRef(ListItemText)
              classes={
                Object {
                  "dense": "MuiListItemText-dense",
                  "inset": "MuiListItemText-inset",
                  "multiline": "MuiListItemText-multiline",
                  "primary": "MuiListItemText-primary",
                  "root": "MuiListItemText-root",
                  "secondary": "MuiListItemText-secondary",
                }
              }
            >
              <div
                className="MuiListItemText-root"
              />
            </ForwardRef(ListItemText)>
          </WithStyles(ForwardRef(ListItemText))>
          <WithStyles(ForwardRef(IconButton))
            key=".2"
            onClick={[Function]}
          >
            <ForwardRef(IconButton)
              classes={
                Object {
                  "colorInherit": "MuiIconButton-colorInherit",
                  "colorPrimary": "MuiIconButton-colorPrimary",
                  "colorSecondary": "MuiIconButton-colorSecondary",
                  "disabled": "Mui-disabled",
                  "edgeEnd": "MuiIconButton-edgeEnd",
                  "edgeStart": "MuiIconButton-edgeStart",
                  "label": "MuiIconButton-label",
                  "root": "MuiIconButton-root",
                  "sizeSmall": "MuiIconButton-sizeSmall",
                }
              }
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                centerRipple={true}
                className="MuiIconButton-root"
                disabled={false}
                focusRipple={true}
                onClick={[Function]}
              >
                <ForwardRef(ButtonBase)
                  centerRipple={true}
                  className="MuiIconButton-root"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  disabled={false}
                  focusRipple={true}
                  onClick={[Function]}
                >
                  <button
                    className="MuiButtonBase-root MuiIconButton-root"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiIconButton-label"
                    >
                      <ForwardRef>
                        <WithStyles(ForwardRef(SvgIcon))>
                          <ForwardRef(SvgIcon)
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden="true"
                              className="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef>
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={true}
                      >
                        <ForwardRef(TouchRipple)
                          center={true}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(IconButton)>
          </WithStyles(ForwardRef(IconButton))>
        </li>
      </ForwardRef(ListItem)>
    </WithStyles(ForwardRef(ListItem))>
  </div>
</Todo>
`;
